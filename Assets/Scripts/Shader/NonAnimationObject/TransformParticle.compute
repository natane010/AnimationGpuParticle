#pragma kernel SetupParticles
#pragma kernel Disable

#pragma kernel UpdateAsGravity
#pragma kernel UpdateKeepAsPosition
#pragma kernel UpdateAsTargetPosition

#pragma kernel UpdatePositionAsAnimation


#define THREAD_NUM 64

#define PI 3.1415926535

#include "./NoiseMath.cginc"


#include "HLSLSupport.cginc"


struct TransformParticle
{
    int isActive;
    int targetId;
    float2 uv;

    float3 targetPosition;

    float speed;
    float3 position;

    int useTexture;
    float scale;

    float4 velocity;

    float3 horizontal;
};

struct InitData
{
    int isActive;
    float3 targetPosition;

    int targetId;
    float scale;

    float4 velocity;

    float2 uv;
    float3 horizontal;
};

struct SkinInVert
{
    float3 pos;
    float3 nor;
    float4 tan;
};

struct InVert2Skin
{
    float weight0;
    float weight1;
    float weight2;
    float weight3;
    int index0;
    int index1;
    int index2;
    int index3;
};

struct OutSkinVert
{
    float3 pos;
    float3 norm;
    float4 tang;
};

RWStructuredBuffer<TransformParticle> _Particles;
StructuredBuffer<InitData> _InitDataList;
StructuredBuffer<float4x4> _MatrixData;
StructuredBuffer<uint> _IndexBuffer;

StructuredBuffer<SkinInVert> m_Source;
StructuredBuffer<InVert2Skin> m_SourceSkin;
StructuredBuffer<float4x4> m_mBones;

uint m_VertCount;

float _DeltaTime;
float _Time;
float _Gravity;
float3 _Origin;

[numthreads(THREAD_NUM, 1, 1)]
void SetupParticles(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    uint idx = _IndexBuffer[id];

    float4x4 mat = _MatrixData[_InitDataList[idx].targetId];

    p.isActive = _InitDataList[idx].isActive;
    p.targetPosition = mul(mat, float4(_InitDataList[idx].targetPosition, 1.0)).xyz;
    p.uv = _InitDataList[idx].uv;
    p.targetId = _InitDataList[idx].targetId;
    p.scale = _InitDataList[idx].scale;
    p.horizontal = _InitDataList[idx].horizontal;
    p.velocity = _InitDataList[idx].velocity;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void SetupParticlesImmediately(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    uint idx = _IndexBuffer[id];

    float4x4 mat = _MatrixData[_InitDataList[idx].targetId];

    p.isActive = _InitDataList[idx].isActive;
    p.position = mul(mat, float4(_InitDataList[idx].targetPosition, 1.0)).xyz;
    p.targetPosition = p.position;
    p.uv = _InitDataList[idx].uv;
    p.targetId = _InitDataList[idx].targetId;
    p.scale = _InitDataList[idx].scale;
    p.horizontal = _InitDataList[idx].horizontal;
    p.velocity = _InitDataList[idx].velocity;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void Disable(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];
    p.isActive = 0;
    _Particles[id] = p;
}


[numthreads(THREAD_NUM, 1, 1)]
void UpdateKeepAsPosition(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];
    p.velocity = 0;
    p.position = p.targetPosition;
    p.useTexture = 1;
    _Particles[id] = p;
}
[numthreads(THREAD_NUM, 1, 1)]
void UpdateAsTarget(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    float3 delta = p.targetPosition - p.position;
    float3 pos = (delta + p.velocity.xyz * 0.2) * _DeltaTime * p.speed;

    const float k = 5.5;
    p.velocity.xyz -= k * p.velocity.xyz * _DeltaTime;

    p.position += pos;
    p.useTexture = 1;

    _Particles[id] = p;
}
[numthreads(THREAD_NUM, 1, 1)]
void UpdateAsTargetPosition(uint id : SV_DispatchThreadID)
{
    uint ui = id;

    TransformParticle p = _Particles[id];

     
    if (ui <= m_VertCount)
    {
        const SkinInVert vert = m_Source[ui];
        InVert2Skin mSS = m_SourceSkin[ui];
        float3 vP = vert.pos.xyz;
        float3 vPacc = float3(0, 0, 0);

        vPacc += mSS.weight0*mul(  m_mBones[mSS.index0], float4(vP,1) ).xyz;
        vPacc += mSS.weight1*mul(  m_mBones[mSS.index1], float4(vP,1) ).xyz;
        vPacc += mSS.weight2*mul(  m_mBones[mSS.index2], float4(vP,1) ).xyz;
        vPacc += mSS.weight3*mul(  m_mBones[mSS.index3], float4(vP,1) ).xyz;

        vP = vPacc;
        //m_MeshVertsOut[id].pos.xyz = vp;
        p.targetPosition = vP;
    }


   

    float3 delta = p.targetPosition - p.position;
    float3 pos = delta * _DeltaTime * p.speed;

    const float k = 5.5;
    p.velocity.xyz -= k * p.velocity.xyz * _DeltaTime;

    p.position += pos;
    p.useTexture = 1;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void UpdateAsGravity(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    float power = p.velocity.w;

    float3 d = p.position - _Origin;
    float3 up = normalize(d);
    float3 forward = normalize(cross(up, p.horizontal) + 0.00001);

    p.velocity.xyz += (forward * power) * _DeltaTime * p.isActive;

    p.velocity.xyz += up * _Gravity * _DeltaTime;

    const float k = 2.5;
    p.velocity.xyz -= k * p.velocity.xyz * _DeltaTime;

    p.position += p.velocity.xyz * _DeltaTime;

    _Particles[id] = p;
}



[numthreads(THREAD_NUM, 1, 1)]
void UpdatePositionAsAnimation(uint3 id : SV_DispatchThreadID, 
    SAMPLER_UNIFORM StructuredBuffer<SkinInVert> m_Source,  
    SAMPLER_UNIFORM StructuredBuffer<InVert2Skin> m_SourceSkin,
    SAMPLER_UNIFORM StructuredBuffer<float4x4> m_mBones)
{
    uint ui = id.x;
    TransformParticle p = _Particles[ui];

    if (ui >= m_VertCount)
    {
        return;
    }

    const SkinInVert vert = m_Source[ui];
    InVert2Skin mSS = m_SourceSkin[ui];
    float3 vP = vert.pos.xyz;
    float3 vPacc = float3(0, 0, 0);

    vPacc += mSS.weight0*mul(  m_mBones[mSS.index0], float4(vP,1) ).xyz;
    vPacc += mSS.weight1*mul(  m_mBones[mSS.index1], float4(vP,1) ).xyz;
    vPacc += mSS.weight2*mul(  m_mBones[mSS.index2], float4(vP,1) ).xyz;
    vPacc += mSS.weight3*mul(  m_mBones[mSS.index3], float4(vP,1) ).xyz;

    vP = vPacc;
    p.targetPosition = vP;
    
}

